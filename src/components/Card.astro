---
import { FeaturedImage } from '../../types/post.type'
import { BASE_URL } from '../utils/constants'
import CategorieChip from './CategorieChip.astro'
import Cover from './Cover.astro'
import { JSDOM }  from 'jsdom'


type Props = {
  title: string
  body: string
  href: string
  noCat?: boolean
  featuredImage: FeaturedImage
  categories: { name: string; slug: string }[]
}

const { href, title, noCat, body, categories, featuredImage } =
  Astro.props as Props

  const dom = new JSDOM(``);
  const el = dom.window.document.createElement('div')
  el.innerHTML = body
  const bodyText = el.textContent.split(' ')
  const excerpt = bodyText.length > 50 ? bodyText.slice(0, 50).join(' ') + ' [...]' : bodyText.join(' ')
---

<article class="card">
  <div class="main">
    <a href={BASE_URL + href}><Cover featuredImage={featuredImage} /></a>
    <div class="text">
      {
        !noCat && (
          <div class="categories">
            {categories.map((cat) => (
              <CategorieChip {...cat} />
            ))}
          </div>
        )
      }
      <a href={BASE_URL + href}><h2>{title}</h2></a>

      <a href={BASE_URL + href}>{excerpt}</a>
    </div>
  </div>
  <a href={BASE_URL + href}>
    <div class="arrow">
      <span>&rarr;</span>
    </div>
  </a>
</article>

<style>
  .card {
    list-style: none;
    padding: 10px;
    display: flex;
    flex-direction: column;
    gap: 10px;
    cursor: pointer;
    border: 1px solid rgba(0, 0, 0, 0.1);
    background: rgba(0, 0, 0, 0.02);
    border-radius: 10px;
  }

  .card > a,
  a {
    width: 100%;
    text-decoration: none;
    line-height: 1.4;
    border-radius: 0.35rem;
    color: var(--text-color);
    word-break: normal;
  }

  a > h2 {
    word-break: normal;
    font-size: 1.2rem;
  }

  .categories {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
  }
  h2 {
    margin: 0;
    transition: color 0.6s cubic-bezier(0.22, 1, 0.36, 1);
    font-size: 1.3rem;
  }

  .text {
    display: flex;
    gap: 5px;
    flex-direction: column;
  }

  .main ~ p {
    margin: 0;
    padding: 0;
  }

  .arrow {
    display: flex;
    justify-content: end;
    font-size: 2em;
    transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1);
  }

  .arrow span {
    transition: transform 0.3s cubic-bezier(0.22, 1, 0.36, 1);
  }

  .card:is(:hover, :focus-within) span {
    will-change: transform;
    transform: translateX(5px);
  }

  .main {
    display: flex;
    flex-direction: column;
    gap: 10px;
  }

  @media screen and (min-width: 600px) {
    .main {
      display: grid;
      grid-template-columns: 1fr 2fr;
      align-items: center;
    }
  }
</style>
